#!/usr/bin/env python

import cmd
from collections import defaultdict, namedtuple
from pprint import pprint

from colorama import Back, Fore, init

from drive_functions import debug_info, change_dir, change_space, list, \
                            list_shared_folders, make_directory, rename_file

class GDriveShell(cmd.Cmd):

    intro = Fore.RESET + '\nWelcome to GDriveShell. Type "help" for help.\n'
    space = 'drive'
    default_path = ['']
    path = ['']
    default_prompt = 'GDrive:{0}:/{1} $ '
    prompt = default_prompt.format(space, '') #default_prompt.format('/'.join(path))



    #
    # overrides
    #

    def default(self, line):
        print('Unknown command: {0}'.format(line))


    def do_EOF(self, line):
        print('')
        return True

    def emptyline(self):
        pass

    def preloop(self):
        init()
    #    self.cwd_subdirs = fetch_subdirs()


    #
    # commands
    #

    def do_debug(self, line):
        dinfo = debug_info()
        
        pprint('self.path: {0}'.format(self.path))
        pprint('path: {0}'.format(dinfo['path']))
        pprint('conn: {0}'.format(dinfo['conn']))
        pprint('cwd_subdirs: {0}'.format(dinfo['cwd_subdirs']))
        pprint('subdir_map: {0}'.format(dinfo['subdir_map']))
        pprint('self.space: {0}'.format(self.space))


    def do_cd(self, line):

        if (len(line) < 1):
            print('too few arguments')
        else:
            try:
                self.path = change_dir(line)
                self.prompt = self.default_prompt.format(self.space, '/'.join(self.path[1:]))
            except:
                print('no such directory')


    def do_cp(self, line):
        args = line.split(' ')
        if (len(args) < 2):
            print('too few arguments')
        else:
            print('copying {0} to {1}'.format(args[0], args[1]))


    def do_cs(self, line):
        if (len(line) < 1):
            print('missing argument')
        else:
            if(change_space(line)):
               self.space = line
               self.path = self.default_path
               self.prompt = self.default_prompt.format(self.space, '/'.join(self.path))
            else:
                print('no such space')
               

    def do_ls_dev(self, line):
        res = list_shared_folders().get('files',[])
        res = sorted(res, key=lambda x: x['name'].lower())

        print('total {0}'.format(len(res)))
        for el in res:
            print('{0}  {1}  {2}  {3}'
                  .format(el['owners'][0]['displayName'], el['modifiedTime'],
                          el.get('size',0), el['name']))


    def do_ln(self, line):
        #
        # vnd.google-apps.symlink
        #
        
        args = line.split(' ')
        if (len(args) < 2):
            print('too few arguments')
        else:
            print('linking {0} to {1}'.format(args[0], args[1]))


    def do_ls(self, line):
        FAttributes = namedtuple('FAttributes', ['attrib_char','colour'])

        fattrs = {'folder':FAttributes('d',Fore.BLUE),
                  'google':FAttributes('g',Fore.WHITE),
                  'office':FAttributes('o',''),
                  'misc':FAttributes('x',''),
                  'audio':FAttributes('a',Fore.YELLOW),
                  'image':FAttributes('i',Fore.RED),
                  'video':FAttributes('v',Fore.GREEN),
                  'text':FAttributes('t',Fore.CYAN)}

        attrib_map = defaultdict(lambda: FAttributes('-',''),
                                 {'application/vnd.google-apps.folder':fattrs['folder'],

                                  'application/vnd.google-apps.document':fattrs['google'],
                                  'application/vnd.google-apps.drawing':fattrs['google'],
                                  'application/vnd.google-apps.form':fattrs['google'],
                                  'application/vnd.google-apps.fusiontable':fattrs['google'],
                                  'application/vnd.google-apps.map':fattrs['google'],
                                  'application/vnd.google-apps.spreadsheet':fattrs['google'],

                                  'application/msword':fattrs['office'],
                                  'application/vnd.ms-powerpoint':fattrs['office'],

                                  'application/octet-stream':fattrs['misc'],
                                  'application/zip':fattrs['misc'],
                                  'application/pdf':fattrs['misc'],

                                  'audio/ogg':fattrs['audio'],
                                  'audio/mpeg':fattrs['audio'],

                                  'image/jpeg':fattrs['image'],
                                  'image/gif':fattrs['image'],

                                  'video/mp4':fattrs['video'],
                                  'video/mpeg':fattrs['video'],

                                  'text/csv;charset=UTF-8':fattrs['text'],
                                  'text/xml':fattrs['text']})

        def add_colour(mime_type, name):

            if (attrib_map.get(mime_type, None)):
                return attrib_map[mime_type].colour + name + Fore.RESET
            else:
                return name


        def encode_misc_attribs(file):
            retval = []

            if (el.get('mimeType', False)):
                retval.append(attrib_map[el['mimeType']].attrib_char)
            else:
                retval.append('-')

            if (el['shared']):
                retval.append('s')
            else:
                retval.append('-')

            retval.append('-')

            return retval


        max_len_size = 1
        max_len_owner = 1
        res = None

        res = list(self.path[-1], line)
        if (len(self.path) == 1):
            shared = list_shared_folders().get('files',[])
            res = res + shared

        res = sorted(res, key=lambda x: x['name'].lower())

        for el in res:
            if (len(el.get('size','0')) > max_len_size):
                max_len_size = len(el.get('size','0'))

            if (len(el['owners'][0]['displayName']) > max_len_owner):
                max_len_owner = len(el['owners'][0]['displayName'])

        print('total {0}'.format(len(res)))
        for el in res:
            misc = encode_misc_attribs(el)
            f_name = add_colour(el['mimeType'], el['name'])
            print('{0}{1}{2}  {3:<{max_len_o}}  {4}  {5:>{max_len_s}}  {6}'
                  .format(*misc, el['owners'][0]['displayName'], el['modifiedTime'],
                          el.get('size',0), f_name, max_len_s=max_len_size, max_len_o=max_len_owner))


    def do_mkdir(self, line):
        args = line.split(' ')
        if (args[0] == ''):
            print('too few arguments')
        else:
            res = make_directory(args[0])
            print('do_mkdir:res: {0}'.format(res))
            if(not res): #make_directory(args[0])):
                print('directory exists')


    def do_mv(self, line):
        args = line.split(' ')
        if (len(args) < 2):
            print('too few arguments')
        else:
            print('moving {0} to {1}'.format(args[0], args[1]))

    def do_rename(self, line):
        args = line.split(' ')
        if (len(args) < 2):
            print('too few arguments')
        else:
            res = rename_file(args[0], args[1])

            if (res == -1):
                print('no such file: {0}'.format(args[0]))
            elif (res == -2):
                print('ambiguous file name: {0}'.format(args[0]))

    def do_rmdir(self, line):
        args = line.split(' ')
        if (len(args) < 1):
            print('too few arguments')
        else:
            print('removing directory {0}'.format(args[0]))


    #def do_inspect_file(self, line):
        

    def do_quit(self, line):
        return True


    def do_exit(self, line):
        return True



if __name__ == '__main__':
    GDriveShell().cmdloop()
    
