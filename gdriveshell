#!/usr/bin/env python
__author__  = 'Marius HÃ¥rstad Bauer-Kjerkreit'
__program__ = 'GDriveShell'
__version__ = '0.0.4-alpha'

import cmd
import httplib2
import os

from collections import defaultdict, namedtuple
from pprint import pprint

from colorama import Back, Fore, init as colorama_init

class DriveConnection:
    __client_id = None
    __client_sec = None

    __config_folder = None

    __conn = None
    __path = ['']
    __path_id = ['root']
    __cwd_subdirs = None
    __spaces = {'drive',
                  'appdatafolder',
                  'photos'}
    __space = 'drive'
    __subdir_map = {}

    def __init__(self, config_folder):
        self.__config_folder = config_folder
        self._load_config()
        self._connect()
        self.__cwd_subdirs = self._fetch_subdirs(self.__path_id[0])

    def _decode_path(self, path):
        folders = path.rstrip('/').split('/')
        subdirs = None

        if (folders[0] == ''):
            subdirs = self._fetch_subdirs('root')
        else:
            subdirs = self._fetch_subdirs(folders[0],self.__path_id[-1])

        for folder in folders[1:-1]:
            subdirs = self._fetch_subdirs(folder,subdirs['..'])

    def _connect(self):
        import os
        from apiclient import discovery
        from argparse import ArgumentParser
        from oauth2client import file, tools
        from oauth2client.client import OAuth2WebServerFlow
        from oauth2client.tools import run_flow

        flags = ArgumentParser(parents=[tools.argparser]).parse_args()
        credential_path = os.path.join(self.__config_folder, 'credentials')

        store = file.Storage(credential_path)
        credentials = store.get()
        if not credentials or credentials.invalid:
            credentials = run_flow(
                OAuth2WebServerFlow(
                    client_id=self.__client_id,
                    client_secret=self.__client_sec,
                    scope=['https://www.googleapis.com/auth/drive'],
                    user_agent=__program__ + '/' + __version__),
                store, flags)
            print('Storing credentials to ' + credential_path)
        http = credentials.authorize(httplib2.Http())

        self.__conn = discovery.build('drive', 'v3', http=http)

    def _load_config(self):
        import sys
        from os.path import exists, expanduser, join
        from configparser import ConfigParser

        self.__config_folder = join(expanduser('~'), '.gdriveshell')
        cfg_file = join(self.__config_folder, 'config')

        if not exists(self.__config_folder):
            os.makedirs(self.__config_folder)
            print('created config dir: ' + self.__config_folder +
                  '\nplease create the file "' + cfg_file + '"')
            sys.exit(0)
        else:
            if not exists(cfg_file):
                print('missing config file "' + cfg_file + '"' + '\nplease create...')
                sys.exit(1)
            else:
                cfg = ConfigParser()
            cfg.read(cfg_file)
            self.__client_id = cfg['auth']['client_id']
            self.__client_sec = cfg['auth']['client_sec']

#
#
#
    def _execute_request(self, request, params):
        res = request(**params).execute()
        files = res.get('files', [])

        while res.get('nextPageToken', False):
            params['pageToken'] = res['nextPageToken']
            res = request(**params).execute()
            files += res.get('files', [])

        return files

    def _file_exists(self, name, only_in_cwd=True):
        params = {'pageSize': 1,
                  'fields': 'files(name, id)'}
        q = 'name = "{0}"'.format(name)

        if (only_in_cwd):
            q += ' and "{0}" in parents'.format(self.__path_id[-1])

        params['q'] = q

        return self._execute_request(self.__conn.files().list, params)


    #
    #
    #
    def change_dir(self, name):

        if (name == '..'):
            if (len(self.__path) > 1):
                self.__path.pop()
                self.__path_id.pop()
                self.__cwd_subdirs = self._fetch_subdirs(self.__path_id[-1])
        else:
            self.__path_id.append(self.__cwd_subdirs[name][0])
            self.__path.append(name)
            self.__cwd_subdirs = self._fetch_subdirs(self.__path_id[-1], self.__path_id[-2])

        return self.__path


    def change_space(self, n_space):

        if ({n_space}.issubset(self.__spaces)):
            self.__space = n_space
            return True
        else:
            return False


    def copy_file(self, source, target):
        pass


    def create_file(self, name, mime_type):
        params = {'body': {'name': name,
                           'mimeType': mime_type,
                           'parents': [self.__path_id[-1]]},
                  'fields': 'id'}
        return self.__conn.files().create(**params).execute()


    def _fetch_shared_dirs(self):

        q = 'mimeType = "application/vnd.google-apps.folder" and sharedWithMe = true'.format(dir)
        params = {'pageSize': 1000,
                  'spaces': self.__space,
                  'q': q,
                  'fields': 'nextPageToken, files(id, name)'}

        name_id_map = {}
        files = filter(lambda x: x.get('parents', True),
                       self.__conn.files().list(**params).execute().get('files', []))

        for file in files:
            name_id_map[file['name']] = [file['id']]

        return name_id_map


    def _fetch_subdirs(self, dir,parent=None):

        if (self.__subdir_map.get(dir, None)):
            return self.__subdir_map[dir]
        else:
            q = 'mimeType = "application/vnd.google-apps.folder" and "{0}" in parents'.format(dir)
            params = {'pageSize': 1000,
                      'spaces': self.__space,
                      'fields': 'nextPageToken, files(id, name)',
                      'q': q}
            name_id_map = {}
            files = self._execute_request(self.__conn.files().list, params)

            for file in files:
                name_id_map[file['name']] = [file['id']]

            if (dir == self.__path_id[0]):
                name_id_map.update(self._fetch_shared_dirs())
            else:
                name_id_map['..'] = self.__subdir_map[parent]

            self.__subdir_map[dir] = name_id_map

            return name_id_map


    def get_file(self, **kwargs):
        pass

    def get_file_by_id(self, id):
        params = {'q':'id is "{0}"'.format(id),
                  'spaces': self.__space,
                  'fields': 'nextPageToken, files(id, owners, size, modifiedTime, version, name,' \
                            'parents, mimeType, shared, capabilities)'}

        return self.__conn.files().list(**params).execute()

    def get_file_by_name(self, name, dir=None):

        q = '{0} in parents and name = {1}'
        params = {'pageSize': 1000,
                  'spaces': self.__space,
                  'fields': 'nextPageToken, files(id, owners, size, modifiedTime, version, name,' \
                            'parents, mimeType, shared, capabilities)'}

        if (dir):
            q = q.format(dir, name)
        else:
            q = q.format(self.__path_id[0], name)

        params['q'] = q

        return self.__conn.files().list(**params).execute()

    def make_directory(self, name):

        if (self._file_exists(name)):
            return False
        else:
            res = self.create_file(name, 'application/vnd.google-apps.folder')
            self.__cwd_subdirs[name] = [res['id']]

            return res

    def move_file(self, source, target):
        pass

    def link_file(self, source, target):
        pass

    def list(self, cwd, qstring=None):

        q = ''
        params = {'pageSize': 1000,
                  'spaces': self.__space,
                  'fields': 'nextPageToken, files(id, owners, size, modifiedTime, version, name,' \
                            'parents, mimeType, shared, capabilities)'}

        if (len(cwd) > 0):
            q += '"{0}" in parents'.format(self.__path_id[-1])
        else:
            q += '"{0}" in parents'.format(self.__path_id[0])

        if (qstring):
            q += ' and ' + qstring

        params['q'] = q

        return self._execute_request(self.__conn.files().list, params)


    def list_shared_folders(self):

        params = {'pageSize': 1000,
                  'spaces': self.__space,
                  'q': 'mimeType = "application/vnd.google-apps.folder" and sharedWithMe = true',
                  'fields': 'nextPageToken, files(id, owners, size, modifiedTime, version, name,' \
                            'parents, mimeType, shared, capabilities)'}

        return self.__conn.files().list(**params).execute()


    def remove_directory(self, name):
        # application/vnd.google-apps.folder
        res = self._file_exists(name)
        if (res):
            q = '"{0}" in parents'.format(res[0]['id'])
            params = {'pageSize': 1,
                      'fields': 'files(name, id)',
                      'q': q}

            if (self._execute_request(self.__conn.files().list, params)):
                return -2
            else:
                self.__conn.files().delete(fileId=res[0]['id']).execute()
                del self.__cwd_subdirs[name]
                return 0
        else:
            return -1


    def rename_file(self, old_name, new_name):

        q_tmpl = '"{0}" in parents and name = "{1}"'
        params = {'pageSize': 1000, 'spaces': self.__space, 'fields': 'files(id)',
                  'q': q_tmpl.format(self.__path_id[-1], old_name)}

        res = self._execute_request(self.__conn.files().list, params)

        if (len(res) == 0):
            return -1
        elif (len(res) > 1):
            return -2
        else:
            res = self.__conn.files().update(fileId=res[0]['id'],
                                          body={'name': new_name},
                                          fields='name').execute()
            return 0


    def remove_file(name):
        pass

    #
    #
    #
    

class GDriveShell(cmd.Cmd):
    intro = Fore.RESET + '\nWelcome to GDriveShell. Type "help" for help.\n'
    space = 'drive'
    default_path = ['']
    path = ['']
    default_prompt = 'GDrive:{0}:/{1} $ '
    prompt = default_prompt.format(space, '')
    __conn = None

    #
    # overrides
    #
    def default(self, line):
        print('Unknown command: {0}'.format(line))

    def do_EOF(self, line):
        print('')
        return True

    def emptyline(self):
        pass

    def preloop(self):
        from os.path import expanduser, join

        colorama_init()
        self.__conn = DriveConnection(join(expanduser('~'),'.gdriveshell'))


    #
    # commands
    #
    def do_debug(self, line):
        pprint('self.path: {0}'.format(self.path))
        pprint('self.__path: {0}'.format(self.__path))
        pprint('__CONN__: {0}'.format(self.__conn))
        pprint('self.__cwd_subdirs: {0}'.format(sorted(self.__conn.__cwd_subdirs.keys())))
        pprint('self.__subdir_map: {0}'.format(sorted(self.__conn.__subdir_map.keys())))
        pprint('self.space: {0}'.format(self.space))

    def do_cd(self, line):

        if (len(line) < 1):
            print('too few arguments')
        else:
            try:
                self.path = self.__conn.change_dir(line)
                self.prompt = self.default_prompt.format(self.space, '/'.join(self.path[1:]))
            except Exception as e:
                print('Exception: ' + e.__repr__())
                print('no such directory')

    def do_cp(self, line):
        args = line.split(' ')
        if (len(args) < 2):
            print('too few arguments')
        else:
            print('copying {0} to {1}'.format(args[0], args[1]))

    def do_cs(self, line):
        if (len(line) < 1):
            print('missing argument')
        else:
            if (self.__conn.change_space(line)):
                self.space = line
                self.path = self.default_path
                self.prompt = self.default_prompt.format(self.space, '/'.join(self.path))
            else:
                print('no such space')

    def do_ls_dev(self, line):
        res = self.__conn._list_shared_folders().get('files', [])
        res = sorted(res, key=lambda x: x['name'].lower())

        print('total {0}'.format(len(res)))
        for el in res:
            print('{0}  {1}  {2}  {3}'
                  .format(el['owners'][0]['displayName'], el['modifiedTime'],
                          el.get('size', 0), el['name']))

    def do_ln(self, line):
        #
        # vnd.google-apps.symlink
        #

        args = line.split(' ')
        if (len(args) < 2):
            print('too few arguments')
        else:
            print('linking {0} to {1}'.format(args[0], args[1]))

    def do_ls(self, line):
        FAttributes = namedtuple('FAttributes', ['attrib_char', 'colour'])

        fattrs = {'folder': FAttributes('d', Fore.BLUE),
                  'google': FAttributes('g', Fore.WHITE),
                  'office': FAttributes('o', ''),
                  'misc': FAttributes('x', ''),
                  'audio': FAttributes('a', Fore.YELLOW),
                  'image': FAttributes('i', Fore.RED),
                  'video': FAttributes('v', Fore.GREEN),
                  'text': FAttributes('t', Fore.CYAN)}

        attrib_map = defaultdict(lambda: FAttributes('-', ''),
                                 {'application/vnd.google-apps.folder': fattrs['folder'],

                                  'application/vnd.google-apps.document': fattrs['google'],
                                  'application/vnd.google-apps.drawing': fattrs['google'],
                                  'application/vnd.google-apps.form': fattrs['google'],
                                  'application/vnd.google-apps.fusiontable': fattrs['google'],
                                  'application/vnd.google-apps.map': fattrs['google'],
                                  'application/vnd.google-apps.spreadsheet': fattrs['google'],

                                  'application/msword': fattrs['office'],
                                  'application/vnd.ms-powerpoint': fattrs['office'],

                                  'application/octet-stream': fattrs['misc'],
                                  'application/zip': fattrs['misc'],
                                  'application/pdf': fattrs['misc'],

                                  'audio/ogg': fattrs['audio'],
                                  'audio/mpeg': fattrs['audio'],

                                  'image/jpeg': fattrs['image'],
                                  'image/gif': fattrs['image'],

                                  'video/mp4': fattrs['video'],
                                  'video/mpeg': fattrs['video'],

                                  'text/csv;charset=UTF-8': fattrs['text'],
                                  'text/xml': fattrs['text']})

        def add_colour(mime_type, name):
            if (attrib_map.get(mime_type, None)):
                return attrib_map[mime_type].colour + name + Fore.RESET
            else:
                return name

        def encode_misc_attribs(file):
            retval = []

            if (el.get('mimeType', False)):
                retval.append(attrib_map[el['mimeType']].attrib_char)
            else:
                retval.append('-')

            if (el['shared']):
                retval.append('s')
            else:
                retval.append('-')

            retval.append('-')

            return retval

        max_len_size = 1
        max_len_owner = 1
        res = None

        res = self.__conn.list(self.path[-1], line)
        if (len(self.path) == 1):
            shared = self.__conn.list_shared_folders().get('files', [])
            res = res + shared

        res = sorted(res, key=lambda x: x['name'].lower())

        for el in res:
            if (len(el.get('size', '0')) > max_len_size):
                max_len_size = len(el.get('size', '0'))

            if (len(el['owners'][0]['displayName']) > max_len_owner):
                max_len_owner = len(el['owners'][0]['displayName'])

        print('total {0}'.format(len(res)))
        for el in res:
            misc = encode_misc_attribs(el)
            f_name = add_colour(el['mimeType'], el['name'])
            print('{0}{1}{2}  {3:<{max_len_o}}  {4}  {5:>{max_len_s}}  {6}'
                  .format(*misc, el['owners'][0]['displayName'], el['modifiedTime'],
                          el.get('size', 0), f_name, max_len_s=max_len_size,
                          max_len_o=max_len_owner))

    def do_mkdir(self, line):
        args = line.split(' ')
        if (args[0] == ''):
            print('too few arguments')
        else:
            if (self.__conn.make_directory(args[0])):
                print('directory exists')

    def do_mv(self, line):
        args = line.split(' ')
        if (len(args) < 2):
            print('too few arguments')
        else:
            print('moving {0} to {1}'.format(args[0], args[1]))

    def do_rename(self, line):
        args = line.split(' ')
        if (len(args) < 2):
            print('too few arguments')
        else:
            res = self.__conn.rename_file(args[0], args[1])

            if (res == -1):
                print('no such file: {0}'.format(args[0]))
            elif (res == -2):
                print('ambiguous file name: {0}'.format(args[0]))

    def do_rm(self, line):
        args = line.split(' ')
        if (args[0] == ''):
            print('too few arguments')
        else:
            print('deleting {0}'.format(args[0]))

    def do_rmdir(self, line):
        args = line.split(' ')
        if (args[0] == ''):
            print('too few arguments')
        else:
            res = self.__conn.remove_directory(args[0])

            if (res == -2):
                print('directory not empty')
            elif (res == -1):
                print('directory does not exist')

    def do_inspect_file(self, line):
        pass

    def do_quit(self, line):
        return True

    def do_exit(self, line):
        return True


if __name__ == '__main__':
    GDriveShell().cmdloop()
