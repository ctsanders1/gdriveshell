#!/usr/bin/env python
__author__  = 'Marius HÃ¥rstad Bauer-Kjerkreit'
__program__ = 'GDriveShell'
__version__ = '0.0.1-alpha'

__CLIENT_ID__  = ''
__CLIENT_SEC__ = ''

DRIVE_ROOT_FOLDER= '0AI004NBMVs0mUk9PVA'

import cmd
import httplib2
import logging
import os

from collections import defaultdict, namedtuple
from pprint import pprint

from colorama import Back, Fore, init as colorama_init


  #                  #
 #                    #
#  drive_functions.py  #
 #                    #
  #                  #

conn = None
path = ['']
path_id = [DRIVE_ROOT_FOLDER]
cwd_subdirs = None
cwd_id = None
spaces = {'drive',
          'appDataFolder',
          'photos'}
space = 'drive'
subdir_map = {}

#
#
#
def debug_info():
    return {'conn':conn,
            'path':path,
            'cwd_subdirs':cwd_subdirs,
            'subdir_map':subdir_map}

#
# 
#
def execute_request(request, params):
    res = request(**params).execute()
    files = res.get('files', [])

    while res.get('nextPageToken', False):
        params['pageToken'] = res['nextPageToken']
        res = request(**params).execute()
        files += res.get('files', [])

    return files

def file_exists(name, only_in_cwd=True):
    params = {'pageSize':1,
              'fields':'files(name, id)'}
    q = 'name = "{0}"'.format(name)

    if (only_in_cwd):
        q += ' and "{0}" in parents'.format(path_id[-1])

    params['q'] = q

    return execute_request(conn.files().list, params)

#
#
#
def change_dir(name):
    global cwd_subdirs

    if(name == '..'):
        if(len(path) > 1):
            path.pop()
            path_id.pop()
            cwd_subdirs = fetch_subdirs(path_id[-1])
    else:
        path_id.append(cwd_subdirs[name][0])
        path.append(name)
        cwd_subdirs = fetch_subdirs(path_id[-1],path_id[-2])

    return path

def change_space(n_space):
    global space
    
    if ({n_space}.issubset(spaces)):
        space = n_space
        return True
    else:
        return False

def copy_file(source, target):
    pass

def create_file(name, mime_type):
    params = {'body':{'name':name,
                      'mimeType':mime_type,
                      'parents':[path_id[-1]]},
              'fields':'id'}
    return conn.files().create(**params).execute()

def fetch_shared_dirs():
    global conn
    q = 'mimeType = "application/vnd.google-apps.folder" and sharedWithMe = true'.format(dir)
    params = {'pageSize':1000,
              'spaces':'drive',
              'q':q,
              'fields':'nextPageToken, files(id, name)'}

    name_id_map = {}
    files = filter(lambda x: x.get('parents', True),
                   conn.files().list(**params).execute().get('files', []))

    for file in files:
        name_id_map[file['name']] = [file['id']]
   
    return name_id_map

def fetch_subdirs(dir,parent=None):
    global conn
    global subdir_map

    if(subdir_map.get(dir,None)):
        return subdir_map[dir]
    else:
        q = 'mimeType = "application/vnd.google-apps.folder" and "{0}" in parents'.format(dir)
        params = {'pageSize':1000,
                  'spaces':'drive',
                  'fields':'nextPageToken, files(id, name)'}
        params['q'] = q
        name_id_map = {}
        files = execute_request(conn.files().list, params)

        for file in files:
            name_id_map[file['name']] = [file['id']]

        if (dir == path_id[0]): #DRIVE_ROOT_FOLDER):
            name_id_map.update(fetch_shared_dirs())
        else:
            name_id_map['..'] = subdir_map[parent]

        subdir_map[dir] = name_id_map
        
        return name_id_map

def get_file(**kwargs):
    pass

def get_file_by_id(id):
    q = ''
    params = {'pageSize':1000,
              'spaces':'drive',
              'fields':'nextPageToken, files(id, owners, size, modifiedTime, version, name,' \
              'parents, mimeType, shared, capabilities)'}

    if(len(cwd) > 0):
        q += '{0} in parents'.format(cwd)
    else:
        q += '{0} in parents'.format(DRIVE_ROOT_FOLDER)

    if(qstring):
        q += ' and ' + qstring

    params['q'] = q
    
    return conn.files().list(**params).execute()

def get_file_by_name(name):
    global conn
    global path_id

    q_tmpl = '{0} in parents and name = {1}'
    params = {'pageSize':1000,
              'spaces':'drive',
              'fields':'nextPageToken, files(id, owners, size, modifiedTime, version, name,' \
              'parents, mimeType, shared, capabilities)'}

    if(len(cwd) > 0):
        q += '{0} in parents'.format(cwd)
    else:
        q += '{0} in parents'.format(DRIVE_ROOT_FOLDER)

    if(qstring):
        q += ' and ' + qstring

    params['q'] = q

def make_directory(name):
    global cwd_subdirs

    if(file_exists(name)):
        return False
    else:
        res = create_file(name, 'application/vnd.google-apps.folder')
        cwd_subdirs[name] = [res['id']]

        return res

def move_file(source, target):
    pass

def link_file(source, target):
    pass

def list(cwd, qstring=None):
    global conn

    q = ''
    params = {'pageSize':1000,
              'spaces':space,
              'fields':'nextPageToken, files(id, owners, size, modifiedTime, version, name,' \
              'parents, mimeType, shared, capabilities)'}

    if(len(cwd) > 0):
        q += '"{0}" in parents'.format(path_id[-1])
    else:
        q += '"{0}" in parents'.format(DRIVE_ROOT_FOLDER)

    if(qstring):
        q += ' and ' + qstring

    params['q'] = q

    return  execute_request(conn.files().list, params)

def list_shared_folders():
    global conn

    params = {'pageSize':1000,
              'spaces':space,
              'q':'mimeType = "application/vnd.google-apps.folder" and sharedWithMe = true',
              'fields':'nextPageToken, files(id, owners, size, modifiedTime, version, name,' \
              'parents, mimeType, shared, capabilities)'}
    
    return conn.files().list(**params).execute()

def remove_directory(name):
    # application/vnd.google-apps.folder
    global cwd_subdirs
    res = file_exists(name)
    if(res):
        q = '"{0}" in parents'.format(res[0]['id'])
        params = {'pageSize':1,
                  'fields':'files(name, id)',
                  'q':q}

        if(execute_request(conn.files().list, params)):
            return -2
        else:
            conn.files().delete(fileId=res[0]['id']).execute()
            del cwd_subdirs[name]
            return 0
    else:
        return -1

def rename_file(old_name, new_name):
    global conn
    global path_id

    q_tmpl = '"{0}" in parents and name = "{1}"'
    params = {'pageSize':1000,
              'spaces':'drive',
              'fields':'files(id)'}

    params['q'] = q_tmpl.format(path_id[-1], old_name)

    res = execute_request(conn.files().list, params)

    if (len(res) == 0):
        return -1
    elif (len(res) > 1):
        return -2
    else:
        res = conn.files().update(fileId=res[0]['id'],
                                  body={'name':new_name},
                                  fields='name').execute()
        return 0

def remove_file(name):
    pass

#
#
#
def generate_drive_connection():
    import os
    from apiclient import discovery
    from argparse import ArgumentParser
    from oauth2client import client,file,tools
    from oauth2client.client import OAuth2WebServerFlow
    from oauth2client.tools import run_flow

    flags = ArgumentParser(parents=[tools.argparser]).parse_args()
    home_dir = os.path.expanduser('~')
    credential_dir = os.path.join(home_dir, '.gdriveshell')
    if not os.path.exists(credential_dir):
        os.makedirs(credential_dir)
    credential_path = os.path.join(credential_dir, 'credentials.json')

    store = file.Storage(credential_path)
    credentials = store.get()
    if not credentials or credentials.invalid:
        credentials = run_flow(
            OAuth2WebServerFlow(
                client_id=__CLIENT_ID__,
                client_secret=__CLIENT_SEC__,
                scope=['https://www.googleapis.com/auth/drive'],
                user_agent=__program__ + '/' + __version__),
            store, flags)
        credentials = tools.run_flow(flow, store, flags)
        print('Storing credentials to ' + credential_path)
    http = credentials.authorize(httplib2.Http())

    return discovery.build('drive', 'v3', http=http)

  #    /                 #
 #    /                   #
#    / drive_functions.py  #
 #  /                     #
  #/                     #

class GDriveShell(cmd.Cmd):

    intro = Fore.RESET + '\nWelcome to GDriveShell. Type "help" for help.\n'
    space = 'drive'
    default_path = ['']
    path = ['']
    default_prompt = 'GDrive:{0}:/{1} $ '
    prompt = default_prompt.format(space, '')

    #
    # overrides
    #
    def default(self, line):
        print('Unknown command: {0}'.format(line))


    def do_EOF(self, line):
        print('')
        return True

    def emptyline(self):
        pass

    def preloop(self):
        global conn
        global cwd_subdirs

        colorama_init()
        conn = generate_drive_connection()
        cwd_subdirs = fetch_subdirs(DRIVE_ROOT_FOLDER)

    #
    # commands
    #
    def do_debug(self, line):
        pprint('self.path: {0}'.format(self.path))
        pprint('path: {0}'.format(path))
        pprint('conn: {0}'.format(conn))
        pprint('cwd_subdirs: {0}'.format(cwd_subdirs))
        pprint('subdir_map: {0}'.format(subdir_map))
        pprint('self.space: {0}'.format(self.space))

    def do_cd(self, line):

        if (len(line) < 1):
            print('too few arguments')
        else:
            try:
                self.path = change_dir(line)
                self.prompt = self.default_prompt.format(self.space, '/'.join(self.path[1:]))
            except Exception as e:
                print('Exception: ' + e.__repr__())
                print('no such directory')

    def do_cp(self, line):
        args = line.split(' ')
        if (len(args) < 2):
            print('too few arguments')
        else:
            print('copying {0} to {1}'.format(args[0], args[1]))

    def do_cs(self, line):
        if (len(line) < 1):
            print('missing argument')
        else:
            if(change_space(line)):
               self.space = line
               self.path = self.default_path
               self.prompt = self.default_prompt.format(self.space, '/'.join(self.path))
            else:
                print('no such space')

    def do_ls_dev(self, line):
        res = list_shared_folders().get('files',[])
        res = sorted(res, key=lambda x: x['name'].lower())

        print('total {0}'.format(len(res)))
        for el in res:
            print('{0}  {1}  {2}  {3}'
                  .format(el['owners'][0]['displayName'], el['modifiedTime'],
                          el.get('size',0), el['name']))

    def do_ln(self, line):
        #
        # vnd.google-apps.symlink
        #

        args = line.split(' ')
        if (len(args) < 2):
            print('too few arguments')
        else:
            print('linking {0} to {1}'.format(args[0], args[1]))

    def do_ls(self, line):
        FAttributes = namedtuple('FAttributes', ['attrib_char','colour'])

        fattrs = {'folder':FAttributes('d',Fore.BLUE),
                  'google':FAttributes('g',Fore.WHITE),
                  'office':FAttributes('o',''),
                  'misc':FAttributes('x',''),
                  'audio':FAttributes('a',Fore.YELLOW),
                  'image':FAttributes('i',Fore.RED),
                  'video':FAttributes('v',Fore.GREEN),
                  'text':FAttributes('t',Fore.CYAN)}

        attrib_map = defaultdict(lambda: FAttributes('-',''),
                                 {'application/vnd.google-apps.folder':fattrs['folder'],

                                  'application/vnd.google-apps.document':fattrs['google'],
                                  'application/vnd.google-apps.drawing':fattrs['google'],
                                  'application/vnd.google-apps.form':fattrs['google'],
                                  'application/vnd.google-apps.fusiontable':fattrs['google'],
                                  'application/vnd.google-apps.map':fattrs['google'],
                                  'application/vnd.google-apps.spreadsheet':fattrs['google'],

                                  'application/msword':fattrs['office'],
                                  'application/vnd.ms-powerpoint':fattrs['office'],

                                  'application/octet-stream':fattrs['misc'],
                                  'application/zip':fattrs['misc'],
                                  'application/pdf':fattrs['misc'],

                                  'audio/ogg':fattrs['audio'],
                                  'audio/mpeg':fattrs['audio'],

                                  'image/jpeg':fattrs['image'],
                                  'image/gif':fattrs['image'],

                                  'video/mp4':fattrs['video'],
                                  'video/mpeg':fattrs['video'],

                                  'text/csv;charset=UTF-8':fattrs['text'],
                                  'text/xml':fattrs['text']})

        def add_colour(mime_type, name):
            if (attrib_map.get(mime_type, None)):
                return attrib_map[mime_type].colour + name + Fore.RESET
            else:
                return name

        def encode_misc_attribs(file):
            retval = []

            if (el.get('mimeType', False)):
                retval.append(attrib_map[el['mimeType']].attrib_char)
            else:
                retval.append('-')

            if (el['shared']):
                retval.append('s')
            else:
                retval.append('-')

            retval.append('-')

            return retval

        max_len_size = 1
        max_len_owner = 1
        res = None

        res = list(self.path[-1], line)
        if (len(self.path) == 1):
            shared = list_shared_folders().get('files',[])
            res = res + shared

        res = sorted(res, key=lambda x: x['name'].lower())

        for el in res:
            if (len(el.get('size','0')) > max_len_size):
                max_len_size = len(el.get('size','0'))

            if (len(el['owners'][0]['displayName']) > max_len_owner):
                max_len_owner = len(el['owners'][0]['displayName'])

        print('total {0}'.format(len(res)))
        for el in res:
            misc = encode_misc_attribs(el)
            f_name = add_colour(el['mimeType'], el['name'])
            print('{0}{1}{2}  {3:<{max_len_o}}  {4}  {5:>{max_len_s}}  {6}'
                  .format(*misc, el['owners'][0]['displayName'], el['modifiedTime'],
                          el.get('size',0), f_name, max_len_s=max_len_size,
                          max_len_o=max_len_owner))

    def do_mkdir(self, line):
        args = line.split(' ')
        if (args[0] == ''):
            print('too few arguments')
        else:
            if(make_directory(args[0])):
                print('directory exists')

    def do_mv(self, line):
        args = line.split(' ')
        if (len(args) < 2):
            print('too few arguments')
        else:
            print('moving {0} to {1}'.format(args[0], args[1]))

    def do_rename(self, line):
        args = line.split(' ')
        if (len(args) < 2):
            print('too few arguments')
        else:
            res = rename_file(args[0], args[1])

            if (res == -1):
                print('no such file: {0}'.format(args[0]))
            elif (res == -2):
                print('ambiguous file name: {0}'.format(args[0]))

    def do_rm(self, line):
        args = line.split(' ')
        if (args[0] == ''):
            print('too few arguments')
        else:
            print('deleting {0}'.format(args[0]))

    def do_rmdir(self, line):
        args = line.split(' ')
        if (args[0] == ''):
            print('too few arguments')
        else:
            res = remove_directory(args[0])

            if(res == -2):
                print('directory not empty')
            elif(res == -1):
                print('directory does not exist')

    def do_inspect_file(self, line):
        pass

    def do_quit(self, line):
        return True

    def do_exit(self, line):
        return True


if __name__ == '__main__':
    GDriveShell().cmdloop()
